@page "/city/list"
@inject NavigationManager Navigation
@inject IObjService<CityModel, CityCreate, CityUpdate> CityService
@inject IMapper mapper

<a href="/city/add" class="btn btn-success float-end">Add City</a>

<h2 class="mt-3 mb-3">Cities</h2>

@if (Citys == null)
{
    <p><em>Loading...</em></p>
}
else if (!Citys.Any())
{
    <p>No cities available.</p>
}
else
{
    <div class="card">
        <div class="card-body">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var p in Citys)
                    {
                        <tr>
                            <th scope="row">@p.Name</th>
                            <td>
                                <a href="@($"city/update/{p.Id}")" class="btn btn-outline-warning btn-sm"><i class="bi bi-pencil"></i> Edit</a>
                                <button @onclick="() => Delete(p.Id)" class="btn btn-outline-danger btn-sm"><i class="bi bi-trash"></i> Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    private List<CityModel> Citys;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            CityService.SetEndpoint("city");
            Citys = await CityService.GetObjects();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching cities: {ex.Message}");
        }
    }

    async Task Delete(Guid id)
    {
        try
        {
            await CityService.DeleteObject(id);
            Citys = await CityService.GetObjects();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting city: {ex.Message}");
        }
    }
}
