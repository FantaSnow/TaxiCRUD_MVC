@page "/order/list" 
@inject NavigationManager Navigation 
@inject IObjService<OrderModel, CityCreate, OrderUpdate> OrderService 
 
<a href="/order/add" class="btn btn-success float-end">Add Order</a> 
 
<h2 class="mt-3 mb-3">Orders</h2> 
 
@if (Orders == null) 
{ 
    <p><em>Loading...</em></p> 
} 
else if (!Orders.Any()) 
{ 
    <p>No roads available.</p> 
} 
else 
{ 
    <div class="card"> 
        <div class="card-body"> 
            <table class="table table-hover"> 
                <thead> 
                    <tr> 
                        <th scope="col">User Order</th> 
                        <th scope="col">User Driver</th> 
                        <th scope="col">Start City</th> 
                        <th scope="col">End City</th> 
                        <th scope="col">Status</th> 
                        <th scope="col">Cost</th> 
                        <th scope="col">Action</th> 
                    </tr> 
                </thead> 
                <tbody> 
                    @foreach (var order in Orders) 
                    { 
                        <tr> 
                            <td>@order.Road.UserOrder.Name</td 
                            <td>@order.Road.UserDriver.Name</td 
                            <td>@order.Road.CityStart.Name</td 
                            <td>@order.Road.CityEnd.Name</td 
                            <td>@order.Status</td> 
                            <td>@order.Cost</td> 
                            <td> 
                                <a href="@($"order/update/{order.Id}")" class="btn btn-outline-warning btn-sm"><i class="bi bi-pencil"></i> Edit</a> 
                                <button @onclick="() => Delete(order.Id)" class="btn btn-outline-danger btn-sm"><i class="bi bi-trash"></i> Delete</button> 
                            </td> 
                        </tr> 
                    } 
                </tbody> 
            </table> 
        </div> 
    </div> 
} 
 
@code { 
    private List<OrderModel> Orders; 
 
    protected override async Task OnInitializedAsync() 
    { 
        try 
        { 
            OrderService.SetEndpoint("order"); 
            Orders = await OrderService.GetObjects(); 
        } 
        catch (Exception ex) 
        { 
            Console.WriteLine($"Error fetching orders: {ex.Message}"); 
        } 
    } 
 
    async Task Delete(Guid id) 
    { 
        try 
        { 
            await OrderService.DeleteObject(id); 
            Orders = await OrderService.GetObjects(); 
        } 
        catch (Exception ex) 
        { 
            Console.WriteLine($"Error deleting orders: {ex.Message}"); 
        } 
    } 
}